networks:
  appnet: { }


services:
  backend:
    image: ghcr.io/${GH_OWNER}/${REPO_NAME}-backend:${BACK_TAG:-latest}
    pull_policy: always
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      key.api: ${API_KEY}
      semester.start: ${semester_start}
      calendar.student.startYear: ${calendar_student_startYear}
      calendar.student.endYear: ${calendar_student_endYear}
      calendar.student.startMonth: ${calendar_student_startMonth}
      calendar.student.endMonth: ${calendar_student_endMonth}
      calendar.student.startDayOfMonth: ${calendar_student_startDayOfMonth}
      calendar.student.endDayOfMonth: ${calendar_student_endDayOfMonth}
    mem_limit: "250m"
    mem_reservation: "100m"
    cpus: "0.4"
    memswap_limit: "512m"
    oom_kill_disable: false
    healthcheck:
      test: [ "CMD-SHELL","curl -f http://localhost:8081/api/v1/check || exit 1" ]
      interval: 10s
      timeout: 1s
      retries: 10
      start_period: 600s
    depends_on:
      postgres:
        condition: service_healthy
    networks: [ appnet ]

  frontend:
    image: ghcr.io/${GH_OWNER}/${REPO_NAME}-fronted:${FRONT_TAG:-latest}
    pull_policy: always
    restart: unless-stopped
    cpus: "0.5"
    mem_limit: "150m"
    mem_reservation: "100m"
    memswap_limit: "512m"
    environment:
      api.url: ${BACKEND_URL:-http://backend:8081/api/v1}
      api.key: ${API_KEY}
      bot.token: ${bot_token}
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8080/ || exit 1" ]
      interval: 15s
      timeout: 3s
      retries: 10
      start_period: 20s
    networks: [ appnet ]

  postgres:
    image: postgres:16
    restart: unless-stopped
    cpus: "0.10"
    mem_limit: "100m"
    mem_reservation: "50m"
    memswap_limit: "3g"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL","pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 60s
      timeout: 5s
      retries: 5
      start_period: 15s
    networks: [ appnet ]
volumes:
  pgdata: